"use strict";var area=document.getElementById("game"),brush=area.getContext("2d");brush.lineWidth=2;var cameraLocation={x:0,y:0};function moveCamera(){cameraLocation.x=objects[0].x<area.width/2?0:mapWidth-objects[0].x<area.width/2?mapWidth-area.width:objects[0].x-area.width/2}//Used to calculate point after rotation
//It is assumed that the rotation is around
//the provided object
function rotateAroundObject(a,b,c){var d=c.angle/180*Math.PI,e=Math.cos(d),f=Math.sin(d),g=a-c.width/2,h=b-c.height/2,i=g*e-h*f+c.x+c.width/2,j=h*e+g*f+c.y+c.height/2;return{x:i,y:j}}//Draw the background color
function drawBackground(a){brush.fillStyle=a?a:"#FFF",brush.fillRect(0,0,area.width,area.height)}//Draw a single object
function drawObject(a){a.circles&&a.circles.forEach(function(b){brush.beginPath();//Calculate the points after rotation
var c=rotateAroundObject(b.x0,b.y0,a);//Set the color of the line. Default to black.
b.color?(brush.fillStyle=b.color,brush.strokeStyle=b.color):(brush.fillStyle="#000",brush.strokeStyle="#000"),brush.arc(c.x-cameraLocation.x,c.y+cameraLocation.y,b.radius,0,2*Math.PI),brush.stroke(),b.fill&&brush.fill()}),a.lines&&a.lines.forEach(function(b){brush.beginPath();//Calculate the points after rotation
var c=rotateAroundObject(b.x0,b.y0,a),d=rotateAroundObject(b.x1,b.y1,a);//Set the color of the line. Default to black.
brush.strokeStyle=b.color?b.color:"#000",brush.moveTo(c.x-cameraLocation.x,c.y+cameraLocation.y),brush.lineTo(d.x-cameraLocation.x,d.y+cameraLocation.y),brush.stroke()})}//Draw the time
function drawTime(){brush.font="30px Arial",brush.fillStyle="#000";var a=timeRemaining/1e3;brush.fillText("Time remaining: "+a,50,50)}//Used to show debug info
function drawFrameTime(a,b,c,d,e){brush.font="30px Arial",brush.fillStyle="#000",brush.fillText("Current fps: "+b+"fps",650,50),brush.fillText("Frame time: "+a+"ms",650,80),brush.fillText("In between frames: "+c+"ms",650,110),brush.fillText("Total time|max: "+d+"|"+e+"ms",650,140)}function drawBorder(){brush.strokeStyle="#000";var a=cameraLocation.x,b=cameraLocation.y;brush.moveTo(-a,-b),brush.lineTo(mapWidth-a,0),brush.lineTo(mapWidth-a,mapHeight+b),brush.lineTo(0,mapHeight+b),brush.lineTo(-a,-b),brush.stroke()}function drawHitBox(){objects.forEach(function(a){brush.beginPath(),brush.strokeStyle="#FF0000",brush.font="12px Arial",brush.fillStyle="#FF0000";var b=rotateAroundObject(0,0,a),c=rotateAroundObject(a.width,0,a),d=rotateAroundObject(a.width,a.height,a),e=rotateAroundObject(0,a.height,a);brush.fillText("x:"+Math.trunc(b.x)+",y:"+Math.trunc(b.y),b.x-cameraLocation.x,b.y+cameraLocation.y),brush.moveTo(b.x-cameraLocation.x,b.y+cameraLocation.y),brush.fillText("x:"+Math.trunc(c.x)+",y:"+Math.trunc(c.y),c.x-cameraLocation.x,c.y+cameraLocation.y),brush.lineTo(c.x-cameraLocation.x,c.y+cameraLocation.y),brush.fillText("x:"+Math.trunc(d.x)+",y:"+Math.trunc(d.y),d.x-cameraLocation.x,d.y+cameraLocation.y),brush.lineTo(d.x-cameraLocation.x,d.y+cameraLocation.y),brush.fillText("x:"+Math.trunc(e.x)+",y:"+Math.trunc(e.y),e.x-cameraLocation.x,e.y+cameraLocation.y),brush.lineTo(e.x-cameraLocation.x,e.y+cameraLocation.y),brush.lineTo(b.x-cameraLocation.x,b.y+cameraLocation.y),brush.stroke()})}//Draw all objects
function drawAll(){drawBackground(backgroundColor),drawBorder(),objects.forEach(function(a){drawObject(a)}),debug&&drawHitBox(),drawTime()}//Clear the canvas
function clear(){area.getContext("2d").clearRect(0,0,area.width,area.height)}